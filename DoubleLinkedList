#include <iostream>
#include <vector>
#include <string>
struct Node {
	int data;
	Node* prev = NULL;
	Node* next = NULL;
};

class DoubleLinkedList {
public:
	Node* head, *tail;
public:
	DoubleLinkedList()
	{
		head = tail = NULL;
	}

	~DoubleLinkedList()
	{
		while (head != NULL)
			pop_front();
	}

	Node* push_front(int data)
	{
		 Node* newNode = new Node;

		newNode->data = data;

		newNode->next = (head);

		newNode->prev = NULL;

		if ((head) != NULL)
			(head)->prev = newNode;

		(head) = newNode;
		return newNode;
	}

	Node* push_back(int data)
	{
		Node *node = new Node;
		node->next = NULL;
		node->prev = NULL;
		node->data = data;

		if (head == NULL) {
			head = node;
		}
		else {
			Node *last = head;
			while (last->next != NULL)
				last = last->next;
			last->next = node;
			node->prev = last;
		}
		return node;
	}

	
	
	void pop_front()
	{
		if (head == NULL)return;

		Node* temp = head->next;

		if (temp != NULL)
		{
			temp->prev = NULL;
		}
		else
			tail = NULL;
		delete head;
		head = temp;
	}

	void pop_back() {
		if (head != NULL) {
			if (head->next == NULL) {
				head = NULL;
			}
			else {
				Node* temp = head;
				while (temp->next->next != NULL)
					temp = temp->next;

				Node* lastNode = temp->next;
				temp->next = NULL;
				delete lastNode;
			}
		}
	}

	Node* getAt(int index)
	{
		Node* temp = head;
		int n = 0;

		while (n != index)
		{
			if (temp == NULL)
				return temp;
			temp = temp->next;
			n++;
		}
		return temp;
	}
	Node* operator [] (int index) { return getAt(index); };
	void insert(int newElement, int position) {
		Node* newNode = new Node();
		newNode->data = newElement;
		newNode->next = NULL;
		newNode->prev = NULL;
		if (position == 0) {
			newNode->next = head;
			head->prev = newNode;
			head = newNode;
		}
		else {
			Node* temp = head;
			for (int i = 1; i < position; i++) {
				if (temp != NULL) {
					temp = temp->next;
				}
			}
			if (temp != NULL) {
				newNode->next = temp->next;
				newNode->prev = temp;
				temp->next = newNode;
				if (newNode->next != NULL)
					newNode->next->prev = newNode;
			}
			else {
				std::cout << "\nThe previous node is null.";
			}
		}
	}

	void erase(int index)
	{
		Node* temp = getAt(index);
		if (temp == NULL)
			return;
		if (temp->prev == NULL)
		{
			pop_front();
			return;

		}

		if (temp->next == NULL)
		{
			pop_back();
			return;
		}

		Node* left = temp->prev;

		Node* right = temp->next;

		left->next = right;
		right->prev = left;
		delete temp;
	}
};
#include <list>

int main()
{
	
	DoubleLinkedList list;

	list.push_back(5);
	list.push_back(3);
	list.push_back(2);
	list.insert(9999,1);


	for (Node* t = list.head; t != NULL; t = t->next)
		std::cout << t->data << '\n';
	std::cout << std::endl;
	
}
